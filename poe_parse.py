from __future__ import division, print_function

import inkex, cubicsuperpath, simplepath, simplestyle, cspsubdiv
from simpletransform import*
from bezmisc import*
from math import radians
import sys, pprint

import distutils
import numpy as np
from math import floor
from xml.dom import minidom

import serial
port = '/dev/ttyACM2'
# ser = serial.Serial(port,9600)
# ser.close()
# ser.open()

class Parser:
    def __init__(self, svg):
        self.svg = svg
        self.entities = []
        self.parsed_svg = {'rect_vals':[], 'bezier_vals':[], 'line_vals':[], 'ellipse_vals':[], 'circle_vals':[]}
        self.translate = [0,000]
        self.svg_dict = {}

    def parse(self):
        self.parse_svg(self.svg)

    def parse_svg(self,node):
        for things in node:
            if things.tag == inkex.addNS('g','svg') or things.tag == 'g':
                current_matrix = things.get('transform')
                current_matrix = (re.findall(r"[-+]?\d*\.\d+|\d+", str(current_matrix)))

                # current_matrix = current_matrix.strip('translate')
                self.translate[0] = self.translate[0] + float(current_matrix[0])
                self.translate[1] = self.translate[1] + float(current_matrix[1])

                self.parse_svg(things)
            else:
                if things.tag == 'path' or things.tag == inkex.addNS('path','svg'):
                    path_vals = things.get('d')
                    path_vals =  [path_vals]

                    line_vals = [(re.findall(r"[-+]?\d*\.\d+|\d+", str(path))) for path in path_vals if ('c') not in path and 'C' not in path]
                    bezier_vals = [(re.findall(r"[-+]?\d*\.\d+|\d+", str(path))) for path in path_vals if 'C' in path or 'c' in path] # this is not working

                    if bezier_vals:
                        xory = 0

                        for list_bezier_vals in bezier_vals:
                            translated_list = []

                            for indiv_vals in list_bezier_vals:
                                translated_list += [str(float(indiv_vals)+self.translate[xory])]
                                if xory == 0:
                                    xory = 1
                                else:
                                    xory = 0

                            self.parsed_svg['bezier_vals'] += [translated_list]

                    if line_vals:
                        xory = 0

                        for list_line_vals in line_vals:
                            translated_list = []

                        for indiv_vals in list_line_vals:
                            translated_list += [str(float(indiv_vals)+self.translate[xory])]
                            if xory == 0:
                                xory = 1
                            else:
                                xory = 0

                        self.parsed_svg['line_vals'] += [translated_list]

                    self.parse_svg(things)

                elif things.tag == 'rect' or things.tag == inkex.addNS('rect','svg'):
                    x = things.get('x')
                    x = str(float(x) + self.translate[0])
                    y = things.get('y')
                    y = str(float(y) + self.translate[1])
                    width = things.get('width')
                    height = things.get('height')

                    self.parsed_svg['rect_vals'] += [[x,y,width,height],]
                    self.parse_svg(things)

                elif things.tag == 'ellipse' or things.tag == inkex.addNS('ellipse','svg'):
                    cx = things.get('cx')
                    cx = str(float(cx) + self.translate[0])
                    cy = things.get('cy')
                    cy = str(float(cy) + self.translate[1])
                    rx = things.get('rx')
                    ry = things.get('ry')

                    self.parsed_svg['ellipse_vals'] += [[cx,cy,rx,ry],]
                    self.parse_svg(things)

                elif things.tag == 'circle' or things.tag == inkex.addNS('circle','svg'):
                    cx = things.get('cx')
                    cx = str(float(cx) + self.translate[0])
                    cy = things.get('cy')
                    cy = str(float(cy) + self.translate[1])
                    r = things.get('r')

                    self.parsed_svg['circle_vals'] += [[cx,cy,r],]
                    self.parse_svg(things)

    def generate(self):
        line_list = []
        bezier_list = []
        rect_list = []
        ellipse_list = []
        circle_list = []

        for line in self.parsed_svg['line_vals']:
            line_list += [line]
        for bezier in self.parsed_svg['bezier_vals']:
            bezier_list += [bezier]
        for rect in self.parsed_svg['rect_vals']:
            rect_list += [rect]
        for ellipse in self.parsed_svg['ellipse_vals']:
            ellipse_list += [ellipse]
        for circle in self.parsed_svg['circle_vals']:
            circle_list += [circle]
        final = {'line': line_list, 'bezier': bezier_list, 'rect': rect_list, 'ellipse': ellipse_list, 'circle': circle_list}
        self.svg_dict = final
        print(final)

        self.serial_out()

    def serial_out(self):
    	# while True:
    	# 	var = ser.read()
    	# 	if '*' in var: break

    	# svg_dict = parse_svg(svg)
    	# svg_dict = {'line': [(44.212378, 52.68294000000003, 92.375928, 18.670529999999985), (92.375928, 18.670529999999985, 143.51867, 45.73149999999998), (143.51867, 45.73149999999998, 135.57416, 141.06556999999998), (135.57416, 141.06556999999998, 90.389802, 177.31234000000006), (90.389802, 177.31234000000006, 46.446769, 137.34156999999993), (46.446769, 137.34156999999993, 44.212378, 52.68294000000003), (49.927449, 90.42311999999993, 70.757264, 76.73496), (70.757264, 76.73496, 87.421116, 91.09264999999994), (87.421116, 91.09264999999994, 65.698594, 108.87239), (65.698594, 108.87239, 49.927449, 90.42311999999993), (50.150625, 90.27433999999994, 47.695683, 90.05115999999998), (47.695683, 90.05115999999998, 47.24933, 83.13269000000003), (47.24933, 83.13269000000003, 47.844467, 74.65197999999998), (47.844467, 74.65197999999998, 77.750131, 74.13122999999996), (77.750131, 74.13122999999996, 90.099235, 87.29864999999995), (90.099235, 87.29864999999995, 87.495508, 88.56331999999998), (90.322412, 98.97821999999996, 87.272332, 107.08696999999995), (87.272332, 107.08696999999995, 80.130681, 116.83235000000002), (80.130681, 116.83235000000002, 85.85888, 117.27870999999993), (85.85888, 117.27870999999993, 89.057744, 121.14710000000002), (89.057744, 121.14710000000002, 93.893237, 121.51905999999997), (93.893237, 121.51905999999997, 96.943317, 117.57627000000002), (96.943317, 117.57627000000002, 101.55563, 118.84093999999993), (101.55563, 118.84093999999993, 104.15936, 117.57627000000002), (104.15936, 117.57627000000002, 97.761631, 107.31015000000002), (97.761631, 107.31015000000002, 97.166494, 99.49896999999999), (68.067048, 134.36056999999994, 90.419775, 135.14877), (90.419775, 135.14877, 114.34886, 136.50437), (114.34886, 136.50437, 90.640465, 145.80486999999994), (90.640465, 145.80486999999994, 68.067048, 134.36056999999994), (44.516291, 113.36347999999998, 33.544854, 89.52897999999993), (33.544854, 89.52897999999993, 39.724169, 71.24324999999999), (39.724169, 71.24324999999999, 43.633532, 73.89152999999999), (140.73706, 121.68664000000001, 156.75283, 95.83440999999993), (156.75283, 95.83440999999993, 150.82573, 81.45803999999998), (150.82573, 81.45803999999998, 144.77253, 83.85410000000002), (137.17365, 95.10577, 118.3087, 78.81587000000002), (118.3087, 78.81587000000002, 99.913353, 90.87566000000004), (99.913353, 90.87566000000004, 119.12931, 111.33865000000003), (119.12931, 111.33865000000003, 137.17365, 95.10577), (136.9718, 94.92912999999999, 139.43487, 95.02828999999997), (139.43487, 95.02828999999997, 140.78045, 88.22726999999998), (140.78045, 88.22726999999998, 141.29736, 79.74143000000004), (141.29736, 79.74143000000004, 111.71551, 75.32166999999993), (111.71551, 75.32166999999993, 97.753362, 86.76455999999996), (97.753362, 86.76455999999996, 100.16974, 88.35825999999997), (89.15869, 84.10631999999998, 93.572487, 82.21469000000002), (93.572487, 82.21469000000002, 98.869042, 84.35853999999995), (87.645388, 82.34079999999994, 93.446378, 79.56641000000002), (93.446378, 79.56641000000002, 100.63456, 82.59302000000002)], 'bezier': [(44.212378, 52.68294000000003, 44.212378, 52.68294000000003, 50.915552, 18.918800000000033, 92.375928, 18.670529999999985), (92.375928, 18.670529999999985, 133.8363, 18.422270000000026, 140.29121, 38.780059999999935, 143.51867, 45.73149999999998), (143.51867, 45.73149999999998, 146.74612, 52.68294000000003, 145.00826, 120.95600999999999, 135.57416, 141.06556999999998), (135.57416, 141.06556999999998, 126.14007, 161.17503999999997, 105.28575, 178.30534, 90.389802, 177.31234000000006), (90.389802, 177.31234000000006, 75.493859, 176.31923999999992, 48.681161, 155.21663999999998, 46.446769, 137.34156999999993), (46.446769, 137.34156999999993, 44.212378, 119.46641999999997, 42.226251, 59.88265000000001, 44.212378, 52.68294000000003), (49.927449, 90.42311999999993, 49.927449, 90.42311999999993, 52.605568, 73.90805, 70.757264, 76.73496), (70.757264, 76.73496, 88.90896, 79.56186000000002, 87.421116, 88.26575000000003, 87.421116, 91.09264999999994), (87.421116, 91.09264999999994, 87.421116, 93.91955999999993, 80.80021, 111.17854, 65.698594, 108.87239), (65.698594, 108.87239, 50.596978, 106.56623000000002, 49.704272, 91.83656999999994, 49.927449, 90.42311999999993), (50.150625, 90.27433999999994, 50.150625, 90.27433999999994, 47.993252, 90.72068999999999, 47.695683, 90.05115999999998), (47.695683, 90.05115999999998, 47.398114, 89.38162999999997, 47.695683, 83.50464999999997, 47.24933, 83.13269000000003), (47.24933, 83.13269000000003, 46.802976, 82.76072999999997, 47.844467, 74.65197999999998, 47.844467, 74.65197999999998), (47.844467, 74.65197999999998, 47.844467, 74.65197999999998, 69.864558, 70.93236999999999, 77.750131, 74.13122999999996), (77.750131, 74.13122999999996, 84.268507, 76.77546999999993, 90.843157, 85.43884000000003, 90.099235, 87.29864999999995), (90.099235, 87.29864999999995, 89.355313, 89.15845000000002, 87.495508, 88.56331999999998, 87.495508, 88.56331999999998), (90.322412, 98.97821999999996, 90.322412, 98.97821999999996, 88.165038, 105.67351999999994, 87.272332, 107.08696999999995), (87.272332, 107.08696999999995, 86.379625, 108.50042999999994, 79.299167, 116.21861000000001, 80.130681, 116.83235000000002), (80.130681, 116.83235000000002, 83.255153, 119.13851, 84.073467, 116.98113999999998, 85.85888, 117.27870999999993), (85.85888, 117.27870999999993, 87.644293, 117.57627000000002, 87.5699, 120.17999999999995, 89.057744, 121.14710000000002), (89.057744, 121.14710000000002, 89.870994, 121.67571999999996, 93.439318, 121.91107999999997, 93.893237, 121.51905999999997), (93.893237, 121.51905999999997, 95.529866, 120.10560999999996, 95.381081, 119.28728999999998, 96.943317, 117.57627000000002), (96.943317, 117.57627000000002, 98.356769, 116.83236, 100.29097, 119.13851, 101.55563, 118.84093999999993), (101.55563, 118.84093999999993, 102.8203, 118.54336999999998, 104.0471, 118.47429999999997, 104.15936, 117.57627000000002), (104.15936, 117.57627000000002, 104.38254, 115.79085999999995, 98.356769, 109.31873999999993, 97.761631, 107.31015000000002), (97.761631, 107.31015000000002, 97.166494, 105.30156, 97.166494, 99.49896999999999, 97.166494, 99.49896999999999), (68.067048, 134.36056999999994, 68.539955, 133.79306999999994, 85.280855, 135.02256999999997, 90.419775, 135.14877), (90.419775, 135.14877, 95.558695, 135.27486999999996, 113.78137, 135.59006999999997, 114.34886, 136.50437), (114.34886, 136.50437, 114.91635, 137.41867000000002, 109.61979, 146.27777000000003, 90.640465, 145.80486999999994), (90.640465, 145.80486999999994, 71.66114, 145.33196999999996, 67.94094, 135.71617000000003, 68.067048, 134.36056999999994), (44.516291, 113.36347999999998, 44.516291, 113.36347999999998, 32.535986, 103.02259000000004, 33.544854, 89.52897999999993), (33.544854, 89.52897999999993, 34.553721, 76.03538000000003, 36.697565, 71.36936000000003, 39.724169, 71.24324999999999), (39.724169, 71.24324999999999, 42.750772, 71.11715000000004, 43.633532, 73.89152999999999, 43.633532, 73.89152999999999), (140.73706, 121.68664000000001, 140.73706, 121.68664000000001, 157.00505, 110.96741999999995, 156.75283, 95.83440999999993), (156.75283, 95.83440999999993, 156.50061, 80.70138999999995, 152.21293, 81.71025999999995, 150.82573, 81.45803999999998), (150.82573, 81.45803999999998, 149.43854, 81.20582000000002, 144.77253, 83.85410000000002, 144.77253, 83.85410000000002), (137.17365, 95.10577, 137.17365, 95.10577, 136.6741, 78.38242000000002, 118.3087, 78.81587000000002), (118.3087, 78.81587000000002, 99.943308, 79.24932000000001, 100.28234, 88.07294999999999, 99.913353, 90.87566000000004), (99.913353, 90.87566000000004, 99.544367, 93.67839000000004, 103.85588, 111.65391999999997, 119.12931, 111.33865000000003), (119.12931, 111.33865000000003, 134.40275, 111.02337999999997, 137.21042, 96.53625, 137.17365, 95.10577), (136.9718, 94.92912999999999, 136.9718, 94.92912999999999, 139.05246, 95.65324999999996, 139.43487, 95.02828999999997), (139.43487, 95.02828999999997, 139.81729, 94.40332999999998, 140.28936, 88.53778999999997, 140.78045, 88.22726999999998), (140.78045, 88.22726999999998, 141.27154, 87.91674999999998, 141.29736, 79.74143000000004, 141.29736, 79.74143000000004), (141.29736, 79.74143000000004, 141.29736, 79.74143000000004, 119.95116, 73.17944999999997, 111.71551, 75.32166999999993), (111.71551, 75.32166999999993, 104.90776, 77.09246999999993, 97.258558, 84.82354999999995, 97.753362, 86.76455999999996), (97.753362, 86.76455999999996, 98.248167, 88.70555000000002, 100.16974, 88.35825999999997, 100.16974, 88.35825999999997), (89.15869, 84.10631999999998, 89.15869, 84.10631999999998, 90.7981, 81.96246999999994, 93.572487, 82.21469000000002), (93.572487, 82.21469000000002, 96.346873, 82.46690999999998, 98.869042, 84.35853999999995, 98.869042, 84.35853999999995), (87.645388, 82.34079999999994, 87.645388, 82.34079999999994, 90.7981, 79.31420000000003, 93.446378, 79.56641000000002), (93.446378, 79.56641000000002, 96.094656, 79.81862999999998, 100.63456, 82.59302000000002, 100.63456, 82.59302000000002)]}
    	svg_dict = self.svg_dict

        for shapes in svg_dict:
            if shapes == 'circle':
                for circle in svg_dict[shapes]:
                    self.draw_circle(circle)
            if shapes == 'ellipse_vals':
                for ellipse in svg_dict[shapes]:
                    pass
            if shapes == 'rect':
                for rect in svg_dict[shapes]:
                    self.draw_rect(rect)
            if shapes == 'line':
                for line in svg_dict[shapes]:
                    self.draw_line(line)
            if shapes == 'bezier':
                for bezier in svg_dict[shapes]:
                    self.draw_bezier(bezier)

    def draw_line(self,line):
    	#handshake bruh
    	while True:
    		ser.write('l$')
    		var = ser.readline()
    		# print var
    		if 'roger' in var: break

    	#helps arduino clear serial cache up to this point
    	ser.write("!")

    	#loops through coordinates of line and sends to arduino
    	for i in [line[0]/4,200-line[1],line[2]/4,200-line[3]]:
    		# sleep(.5)
    		ser.write(str(i) + '!')
    		ser.write('\n')

    	#waits for arduino
    	while True:
    		var = ''
    		var = ser.readline()
    		# print var
    		if 'done' in var: break

    def draw_bezier(self,bezier):
    	#handshake bruh
    	while True:
    		ser.write('b$')
    		var = ser.readline()
    		if 'roger' in var: break

    	#helps arduino clear serial cache up to this point
    	ser.write("!")

    	for i in [bezier[0]/4,200-bezier[1],bezier[2]/4,200-bezier[3],bezier[4]/4,200-bezier[5],bezier[6]/4,200-bezier[7]]:
    		# sleep(.5)
    		ser.write(str(i) + '!')
    		ser.write('\n')

    	while True:
    		var = ''
    		var = ser.readline()
    		# print var
    		if 'done' in var: break

    def draw_rect(self,rect):

    	#handshake bruh
    	while True:
    		ser.write('r$')
    		var = ser.readline()
    		if 'roger' in var: break

    	#helps arduino clear serial cache up to this point
    	ser.write("!")

    	for i in [rect[0]/4,200-rect[1],rect[2]/4,rect[3]]:
    		# sleep(.5)
    		ser.write(str(i) + '!')
    		ser.write('\n')

    	while True:
    		var = ''
    		var = ser.readline()
    		# print var
    		if 'done' in var: break

    def draw_circle(self,circle):
    	#handshake bruh
    	while True:
    		ser.write('e$')
    		var = ser.readline()
    		if 'roger' in var: break

    	#helps arduino clear serial cache up to this point
    	ser.write("!")

    	for i in [circle[0]/4,200-circle[1],circle[2]/4,circle[2]]:
    		# sleep(.5)
    		ser.write(str(i) + '!')
    		ser.write('\n')

    	while True:
    		var = ''
    		var = ser.readline()
    		# print var
    		if 'done' in var: break
